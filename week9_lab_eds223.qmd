---
title: "Week 9 lab"
author: "BJ"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
install.packages("rpart")
install.packages("rpart.plot")
```

```{r}
library(sf)
library(terra)
library(here)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(tmap)
```


```{r}
filelist <- list.files(here::here("data", "landsat-data"), full.names = TRUE)

landsat <- rast(filelist)

names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")

plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
```

```{r}
SB_county_south <- st_read(here::here("data", "SB_county_south.shp")) %>% 
  st_transform(., crs = crs(landsat))

tm_shape(SB_county_south) +
  tm_borders()
```

```{r}
# Crop the Landsat scene to the extent of the study area
landsat_cropped <- terra::crop(landsat, SB_county_south)

# Mask the raster to the study area
landsat_masked <- terra::mask(landsat_cropped, SB_county_south)

rm(landsat, SB_county_south, landsat_cropped) 

plotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = "lin")

```

```{r}
# Converting landsat values into reflectance
# Reclassify erroneaous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
                43636, Inf, NA), ncol = 3, byrow = TRUE)

landsat <- terra::classify(landsat_masked, rcl = rcl)

# Adjust values based on scaling and additive factor
landsat <- (landsat * 0.0000275 - 0.2) * 100
summary(landsat)
```

## Training classifier

```{r}
# read in training data
training_data <- st_read(here::here("data", "trainingdata.shp")) %>% 
  st_transform(., crs = crs(landsat))

```

```{r}
# Extract reflectance values at training sites
training_data_values <- terra::extract(landsat, training_data, df = TRUE)

training_data_attributes <- training_data %>% 
  st_drop_geometry()

SB_training_data <- left_join(training_data_values, training_data_attributes,
          by = c("ID" = "id")) %>% 
  mutate(type = as.factor(type))
```

```{r}
# Establish model formula
SB_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2

# Train decision tree
SB_decision_tree <- rpart(formula = SB_formula,
                          data = SB_training_data, 
                          method = "class",
                          na.action = na.omit)

prp(SB_decision_tree)
```

## Classify image

```{r}
# classify image based on decision tree
SB_classification <- terra::predict(landsat, SB_decision_tree,
                                    type = "class", na.rm = TRUE)

levels(SB_training_data$type)
levels(SB_classification)
```

```{r}
tm_shape(SB_classification) + 
  tm_raster(palette = c("#8DB580", "#F2DDA4", "grey", "cornflowerblue"),
            labels = c("green vegetation",
                       "soil/dead grass",
                       "urban",
                       "water"),
            title = "Land cover type") +
  tm_layout(legend.position = c("left", "bottom"),
            main.title = "Santa Barbara Land Cover")
  
```









